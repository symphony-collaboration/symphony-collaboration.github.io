"use strict";(self.webpackChunksymphony_collaboration=self.webpackChunksymphony_collaboration||[]).push([[655],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=l.createContext({}),s=function(e){var t=l.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return l.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=s(n),k=i,h=u["".concat(o,".").concat(k)]||u[k]||c[k]||a;return n?l.createElement(h,r(r({ref:t},d),{},{components:n})):l.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:i,r[1]=p;for(var s=2;s<a;s++)r[s]=n[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var l=n(7462),i=(n(7294),n(3905));const a={title:"Symphony Client",sidebar_label:"Client",description:"Symphony API Docs: Client"},r="Symphony Client",p={unversionedId:"api/client",id:"api/client",title:"Symphony Client",description:"Symphony API Docs: Client",source:"@site/docs/api/01-client.mdx",sourceDirName:"api",slug:"/api/client",permalink:"/api/client",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Symphony Client",sidebar_label:"Client",description:"Symphony API Docs: Client"},sidebar:"apiDocsSidebar"},o={},s=[{value:"Getting Started",id:"getting-started",level:2},{value:"API",id:"api",level:2},{value:"SymphonyClient",id:"symphonyclient",level:3},{value:"Room",id:"room",level:3},{value:"History",id:"history",level:3},{value:"SyncedList",id:"syncedlist",level:3},{value:"SyncedMap",id:"syncedmap",level:3}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"symphony-client"},"Symphony Client"),(0,i.kt)("p",null,"The Symphony client provides a set of intutive APIs to interact with the Symphony runtime."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"Install the Symphony client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install @symphony-rtc/client\n")),(0,i.kt)("p",null,"Require the client module in your application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"import { SymphonyClient } from @symphony-rtc/client\n")),(0,i.kt)("p",null,"Instantiate a new Symphony Client that can be used to connect to a Room:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const client = new SymphonyClient(websocketUrl)\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"symphonyclient"},"SymphonyClient"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"enter(roomId)")),(0,i.kt)("p",null,"Enters a room and returns it."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"leave(roomId)")),(0,i.kt)("p",null,"Leaves a room."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"room"},"Room"),(0,i.kt)("p",null,"A Room object is returned when calling ",(0,i.kt)("inlineCode",{parentName:"p"},"Client.enter()"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bundle(callback)")),(0,i.kt)("p",null,"Merges operations in the callback function into a single operation."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getClientId()")),(0,i.kt)("p",null,"Returns the id of the client."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getOthers()")),(0,i.kt)("p",null,"Returns all other users in the Room."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"getRoomId()")),(0,i.kt)("p",null,"Returns the Room id."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newList(id)")),(0,i.kt)("p",null,"Returns a new top-level SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newMap(id)")),(0,i.kt)("p",null,"Returns a new top-level SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newNestedList()")),(0,i.kt)("p",null,"Returns a new SyncedList that can be nested within another synced type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newNestedMap()")),(0,i.kt)("p",null,"Returns a new SyncedMap that can be nested within another synced type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"subscribe(subscribedItem, callback)")),(0,i.kt)("p",null,"Subscribes to updates for an item. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribedItem")," is a SyncedList or SyncedMap, the provided callback is executed whenever that shared type changes. If the subscribedItem is ",(0,i.kt)("inlineCode",{parentName:"p"},"'others'"),", the provided callback is executed whenever another client's presence changes."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"unsubscribe(subscribedItem)")),(0,i.kt)("p",null,"Stops subscribing to the SyncedList or SyncedMap passed as an argument."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"updatePresence(props)")),(0,i.kt)("p",null,"Updates the presence of the client. Properties passed as arguments will be updated, while other properties of presence will remain unchanged."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"history"},"History"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"canRedo()")),(0,i.kt)("p",null,"Checks whether there are any operations to redo, and returns a boolean."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"canUndo()")),(0,i.kt)("p",null,"Checks whether there are any operations to undo, and returns a boolean."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"clear()")),(0,i.kt)("p",null,"Removes all operations from the history."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mergeAll()")),(0,i.kt)("p",null,"Merges all subsequent operations into a single operation until ",(0,i.kt)("inlineCode",{parentName:"p"},"stopMergingAll")," is called."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"redo()")),(0,i.kt)("p",null,"Redoes the last operation by the client."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"stopCaptureTimeout()")),(0,i.kt)("p",null,"Prevents the next operation from being merged with the previous based on ",(0,i.kt)("inlineCode",{parentName:"p"},"captureTimeout"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"stopMergingAll()")),(0,i.kt)("p",null,"Stops merging operations; subsequent operations will be treated as separate."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"undo()")),(0,i.kt)("p",null,"Undoes the last operation by the client."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"syncedlist"},"SyncedList"),(0,i.kt)("p",null,"The SyncedList is a shared type that is similar to the JavaScript Array."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"length")),(0,i.kt)("p",null,"Returns the number of elements of the SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"clear()")),(0,i.kt)("p",null,"Removes all elements from the SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"delete(index, length)")),(0,i.kt)("p",null,"Removes ",(0,i.kt)("inlineCode",{parentName:"p"},"length")," elements from the SyncedList starting at the specified index."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"every(callback)")),(0,i.kt)("p",null,"Checks whether all elements in the SyncedList pass the test implemented by the provided function, and returns a Boolean value."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"filter(callback)")),(0,i.kt)("p",null,"Returns a new array containing all elements in the SyncedList that pass the test implemented by the provided function."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"find(callback)")),(0,i.kt)("p",null,"Returns the first element in the SyncedList that satisfies the provided testing function."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"forEach(callback)")),(0,i.kt)("p",null,"Calls the provided function once for each element of the SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"get(index)")),(0,i.kt)("p",null,"Returns the element at the specified index of the SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"indexOf(element)")),(0,i.kt)("p",null,"Returns the first index at which a given element can be found in the SyncedList, or -1 if not present."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"insert(index, ...elements)")),(0,i.kt)("p",null,"Inserts one or more elements at the specified index."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"lastIndexOf(element)")),(0,i.kt)("p",null,"Returns the index of the last occurrence of the specified element in the SyncedList, or -1 if not present."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"map(callback)")),(0,i.kt)("p",null,"Returns an array containing the elements of the SyncedList for which the provided function returns a truthy value."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"move(oldIndex, newIndex)")),(0,i.kt)("p",null,"Moves the element at a specified index of the SyncedList to a new index."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newHistory(captureTimeout=0)")),(0,i.kt)("p",null,"Returns a new History object that can be used to undo/redo the current client's changes."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"push(...elements)")),(0,i.kt)("p",null,"Adds one or more elements to the SyncedList and returns the new length of the SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"set(index, element)")),(0,i.kt)("p",null,"Replaces the element at the specified index of the SyncedList with the provided element."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"slice(start, end)")),(0,i.kt)("p",null,"Returns an array containing the elements of the SyncedList from ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," (non-inclusive)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"some(callback)")),(0,i.kt)("p",null,"Checks whether at least one element in the SyncedList passes the test implemented by the provided function, and returns a Boolean value."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toArray()")),(0,i.kt)("p",null,"Returns an array containing all the elements of the SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toJSON()")),(0,i.kt)("p",null,"Returns a JSON representation of the SyncedList."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"unshift(...elements)")),(0,i.kt)("p",null,"Adds one or more elements to the beginning of the SyncedList and returns the new length of the SyncedList."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"syncedmap"},"SyncedMap"),(0,i.kt)("p",null,"The SyncedMap is a shared type that is similar to the JavaScript Map."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"clear()")),(0,i.kt)("p",null,"Removes all elements from the SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"copy()")),(0,i.kt)("p",null,"Returns a new SyncedMap with the same #values as the caller."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"delete(key)")),(0,i.kt)("p",null,"Removes the specified entry from the SyncedMap by key. Returns true if the entry existed and has been removed, or false if it did not exist."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"entries()")),(0,i.kt)("p",null,"Returns a new Iterator object of ","[key, value]"," pairs for each entry in the SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"forEach(callback)")),(0,i.kt)("p",null,"Calls the provided function once for each ","[key, value]"," pair of the SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"get(key)")),(0,i.kt)("p",null,"Returns a specified entry from the SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"has(key)")),(0,i.kt)("p",null,"Returns a Boolean indicating whether the SyncedMap contains an entry with the specified key or not."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"keys()")),(0,i.kt)("p",null,"Returns a new Iterator object containing the keys for each entry in the SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newHistory()")),(0,i.kt)("p",null,"Returns a new History object that can be used to undo/redo the current client's changes."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"set(key, value)")),(0,i.kt)("p",null,"Adds or updates an entry in the SyncedMap with a specified key and a value."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"size()")),(0,i.kt)("p",null,"Returns the number of elements in the SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"toJSON()")),(0,i.kt)("p",null,"Returns a JSON representation of the SyncedMap."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"values()")),(0,i.kt)("p",null,"Returns a new Iterator object that contains the the values for each entry in the SyncedMap."))}c.isMDXComponent=!0}}]);